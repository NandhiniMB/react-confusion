[{"E:\\Projects\\React_Projects\\confusion\\src\\index.js":"1","E:\\Projects\\React_Projects\\confusion\\src\\App.js":"2","E:\\Projects\\React_Projects\\confusion\\src\\reportWebVitals.js":"3","E:\\Projects\\React_Projects\\confusion\\src\\components\\MenuComponent.js":"4","E:\\Projects\\React_Projects\\confusion\\src\\shared\\dishes.js":"5","E:\\Projects\\React_Projects\\confusion\\src\\components\\DishDetailComponent.js":"6","E:\\Projects\\React_Projects\\confusion\\src\\components\\MainComponent.js":"7","E:\\Projects\\React_Projects\\confusion\\src\\components\\HeaderComponent.js":"8","E:\\Projects\\React_Projects\\confusion\\src\\components\\FooterComponent.js":"9","E:\\Projects\\React_Projects\\confusion\\src\\components\\HomeComponent.js":"10","E:\\Projects\\React_Projects\\confusion\\src\\components\\ContactComponent.js":"11","E:\\Projects\\React_Projects\\confusion\\src\\shared\\comments.js":"12","E:\\Projects\\React_Projects\\confusion\\src\\shared\\promotions.js":"13","E:\\Projects\\React_Projects\\confusion\\src\\shared\\leaders.js":"14","E:\\Projects\\React_Projects\\confusion\\src\\components\\AboutComponent.js":"15","E:\\Projects\\React_Projects\\confusion\\src\\redux\\configureStore.js":"16","E:\\Projects\\React_Projects\\confusion\\src\\redux\\reducer.js":"17","E:\\Projects\\React_Projects\\confusion\\src\\redux\\dishes.js":"18","E:\\Projects\\React_Projects\\confusion\\src\\redux\\comments.js":"19","E:\\Projects\\React_Projects\\confusion\\src\\redux\\promotions.js":"20","E:\\Projects\\React_Projects\\confusion\\src\\redux\\leaders.js":"21","E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionTypes.js":"22","E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionCreators.js":"23","E:\\Projects\\React_Projects\\confusion\\src\\components\\LoadingComponent.js":"24","E:\\Projects\\React_Projects\\confusion\\src\\redux\\forms.js":"25","E:\\Projects\\React_Projects\\confusion\\src\\components\\CommentComponent.js":"26","E:\\Projects\\React_Projects\\confusion\\src\\shared\\baseUrl.js":"27"},{"size":656,"mtime":1607167484781,"results":"28","hashOfConfig":"29"},{"size":539,"mtime":1608021186540,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":1645,"mtime":1608728132935,"results":"32","hashOfConfig":"29"},{"size":1490,"mtime":1607431869454,"results":"33","hashOfConfig":"29"},{"size":3429,"mtime":1608800881205,"results":"34","hashOfConfig":"29"},{"size":4346,"mtime":1608819899130,"results":"35","hashOfConfig":"29"},{"size":5141,"mtime":1607840110048,"results":"36","hashOfConfig":"29"},{"size":2635,"mtime":1607660626552,"results":"37","hashOfConfig":"29"},{"size":2238,"mtime":1608803788266,"results":"38","hashOfConfig":"29"},{"size":17549,"mtime":1608819787885,"results":"39","hashOfConfig":"29"},{"size":4280,"mtime":1607432873732,"results":"40","hashOfConfig":"29"},{"size":445,"mtime":1607432498390,"results":"41","hashOfConfig":"29"},{"size":2382,"mtime":1607431893221,"results":"42","hashOfConfig":"29"},{"size":5411,"mtime":1608818913278,"results":"43","hashOfConfig":"29"},{"size":815,"mtime":1608382259047,"results":"44","hashOfConfig":"29"},{"size":407,"mtime":1608021181094,"results":"45","hashOfConfig":"29"},{"size":595,"mtime":1608804970946,"results":"46","hashOfConfig":"29"},{"size":539,"mtime":1608730830340,"results":"47","hashOfConfig":"29"},{"size":680,"mtime":1608805036489,"results":"48","hashOfConfig":"29"},{"size":602,"mtime":1608805014565,"results":"49","hashOfConfig":"29"},{"size":574,"mtime":1608802479591,"results":"50","hashOfConfig":"29"},{"size":6282,"mtime":1608820081075,"results":"51","hashOfConfig":"29"},{"size":256,"mtime":1608357071097,"results":"52","hashOfConfig":"29"},{"size":170,"mtime":1608381972760,"results":"53","hashOfConfig":"29"},{"size":4699,"mtime":1608731539632,"results":"54","hashOfConfig":"29"},{"size":48,"mtime":1608699155237,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"yphdkl",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"E:\\Projects\\React_Projects\\confusion\\src\\index.js",[],["117","118"],"E:\\Projects\\React_Projects\\confusion\\src\\App.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\reportWebVitals.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\MenuComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\shared\\dishes.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\DishDetailComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\MainComponent.js",["119"],"import { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Header from './HeaderComponent'\r\nimport Footer from './FooterComponent'\r\n;import Menu from './MenuComponent';\r\nimport DishDetail from './DishDetailComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport {Switch, Route, Redirect, withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport { postFeedback, postComment, fetchDishes, fetchComments, fetchPromos, fetchLeaders } from '../redux/ActionCreators';\r\nimport {actions} from 'react-redux-form';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\nconst mapStateToProps = state =>{\r\n  return{\r\n    dishes :state.dishes,\r\n    comments : state.comments,\r\n    promotions : state.promotions,\r\n    leaders :state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  \r\n  postComment: (dishId, rating, author, comment) =>{dispatch(postComment(dishId, rating, author, comment))},\r\n  postFeedback: (feedback) => {dispatch(postFeedback(feedback))},\r\n  fetchDishes: () =>{ dispatch(fetchDishes())},\r\n  fetchComments: () => {dispatch(fetchComments())},\r\n  fetchPromos: () => {dispatch(fetchPromos())},\r\n  fetchLeaders: () => {dispatch(fetchLeaders())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))}\r\n\r\n});\r\n\r\nclass Main extends Component\r\n{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = {\r\n    //   dishes: DISHES,\r\n\r\n    //   comments : COMMENTS,\r\n    //   leaders : LEADERS,\r\n    //   promotions : PROMOTIONS\r\n    // };\r\n\r\n  }\r\n\r\n  // onDishSelect(dishId) {\r\n  //   this.setState({ selectedDish: dishId});}\r\n  componentDidMount(){\r\n    this.props.fetchDishes();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n    this.props.fetchLeaders();\r\n  }\r\n\r\n  \r\n  render(){\r\n    \r\n    const HomePage = ()=>{\r\n      return (\r\n       <Home dish={this.props.dishes.dishes.filter((dish)=>dish.featured)[0]} \r\n       dishesLoading = { this.props.dishes.isLoading}\r\n       dishesErrMsg = {this.props.dishes.errMsg}\r\n\r\n       promotion={this.props.promotions.promotions.filter((promotion)=>promotion.featured)[0]} \r\n       promosLoading = { this.props.promotions.isLoading}\r\n       promosErrMSg = {this.props.promotions.errMsg}\r\n\r\n       leader={this.props.leaders.leaders.filter((leader)=>leader.featured)[0]} \r\n       leadersLoading = { this.props.leaders.isLoading}\r\n       leadersErrMsg = {this.props.leaders.errMsg}\r\n       />\r\n       \r\n      );\r\n      \r\n    };\r\n\r\n    const DishWithId = ({match}) =>{\r\n      return (\r\n      <DishDetail dish={this.props.dishes.dishes.filter((dish)=>dish.id === parseInt(match.params.dishId,10))[0]}\r\n       dishesLoading={this.props.dishes.isLoading}\r\n       dishesErrMsg={this.props.dishes.errMsg}\r\n\r\n       comment = {this.props.comments.comments.filter((comment)=>comment.dishId === parseInt(match.params.dishId,10))}\r\n       commentsLoading =  { this.props.comments.isLoading}\r\n       commentsErrMSg = {this.props.comments.errMsg}\r\n\r\n       postComment={this.props.postComment}/>\r\n      );\r\n    };\r\n\r\n\r\n    return (\r\n\r\n      \r\n      <div className=\"App\">\r\n        <Header/>\r\n        {/* <Menu dishes={this.state.dishes} onClick={(dishId)=> this.onDishSelect(dishId)}/>\r\n        <DishDetail dish={this.state.dishes.filter((dish)=>dish.id === this.state.selectedDish)[0]}/> */}\r\n        <TransitionGroup>\r\n            <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\r\n              <Switch location={this.props.location}>\r\n                <Route path='/home' component={HomePage}/>\r\n                <Route exact path='/contactus' component={() => <Contact postFeedback={this.props.postFeedback} resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n                <Route exact path='/about' component={()=> <About leaders={this.props.leaders}/>}/>\r\n                <Route exact path='/menu' component={()=><Menu dishes={this.props.dishes}/>}/>\r\n                <Route path='/menu/:dishId' component={DishWithId}/>\r\n                <Redirect to='/home'/>\r\n              </Switch>\r\n            </CSSTransition>\r\n          </TransitionGroup>\r\n        \r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//export default Main;\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));\r\n","E:\\Projects\\React_Projects\\confusion\\src\\components\\HeaderComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\FooterComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\HomeComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\ContactComponent.js",["120","121","122","123","124","125","126","127","128"],"import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {BreadcrumbItem,Breadcrumb,Button,Label, Row, Col} from 'reactstrap';\r\nimport {Control,Form,Errors,actions} from 'react-redux-form'\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass  Contact extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n        //this.handleInputChange=this.handleInputChange.bind(this);\r\n        //this.handleBlur=this.handleBlur.bind(this);\r\n       \r\n        // this.state = {\r\n        //     firstname : '',\r\n        //     lastname : '',\r\n        //     telnum : '',\r\n        //     email : '',\r\n        //     agree: false,\r\n        //     contactType: 'Tel,',\r\n        //     message: '',\r\n        //     touched:{\r\n        //         firstname:false,\r\n        //         lastname: false,\r\n        //         telnum : false,\r\n        //         email: false\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    // handleBlur = (field) => (evt) =>\r\n    // {\r\n    //     this.setState({\r\n    //         touched:{...this.state.touched, [field]:true}\r\n    //     });\r\n\r\n    //}\r\n\r\n    // validate(firstname,lastname,telnum,email){\r\n    //     const errors={\r\n    //         firstname : '',\r\n    //         lastname : '',\r\n    //         telnum : '',\r\n    //         email : '',\r\n    //     }\r\n\r\n    //     if(this.state.touched.firstname && firstname.length<3)\r\n    //       errors.firstname = \"Invalid FirstName\";\r\n    //     else if(this.state.touched.firstname && firstname.length > 10)\r\n    //       errors.firstname = \"Invalid FirstName\";\r\n        \r\n    //     if(this.state.touched.lastname && lastname.length<3)\r\n    //       errors.lastname = \"Invalid LastName\";\r\n    //     else if(this.state.touched.lastname && lastname.length > 10)\r\n    //       errors.lastname = \"Invalid LastName\";\r\n\r\n    //     const reg = /^\\d+$/;\r\n    //     if(this.state.touched.telnum && !reg.test(telnum))\r\n    //       errors.telnum =\"Invalid Number\";\r\n\r\n    //     if(this.state.touched.email &&  email.split('').filter(x =>x === '@').length !== 1)\r\n    //     errors.telnum =\"Invalid Email\";\r\n\r\n    //     return errors;\r\n\r\n        \r\n    // }\r\n\r\n\r\n    // handleInputChange(event){\r\n    //     const target = event.target;\r\n    //     const value= target.type === 'checkbox' ? target.checked : target.value;\r\n    //     const name= target.name;       \r\n\r\n    //     this.setState({\r\n    //         [name]:value\r\n    //     });\r\n\r\n    // }\r\n\r\n    handleSubmit(values)\r\n    {\r\n\r\n       \r\n        this.props.postFeedback(values);\r\n        // console.log(\"Current state is : \"+JSON.stringify(values));\r\n        // alert(\"Current state is : \"+JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n       \r\n    }\r\n\r\n    render(){\r\n\r\n       // const errors = this.validate(this.state.firstname,this.state.lastname,this.state.telnum,this.state.email);\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row row-content\">\r\n              <Breadcrumb>\r\n              <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n              <BreadcrumbItem active>Contact</BreadcrumbItem>\r\n              </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        {/* <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"firstname\" md={2} sm={2}> FirstName</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\"  placeholder= \"First Name \" value={this.state.firstname} \r\n                                    onBlur={this.handleBlur('firstname')} onChange={this.handleInputChange} valid={errors.firstname === ''} invalid={errors.firstname != ''}/>\r\n                                    <FormFeedback>{errors.firstname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"lastname\" md={2} sm={2}> LastName</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\" placeholder= \"Last Name \" value={this.state.lastname} \r\n                                    onBlur={this.handleBlur('lastname')} onChange={this.handleInputChange} valid={errors.lastname === ''} invalid={errors.lastname != ''}/>\r\n                                    <FormFeedback>{errors.lastname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"telnum\" md={2} sm={2}>Contact</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\" placeholder= \"Phone Number \" value={this.state.telnum} \r\n                                    onBlur={this.handleBlur('telnum')} onChange={this.handleInputChange} valid={errors.telnum === ''} invalid={errors.telnum != ''}/>\r\n                                    <FormFeedback>{errors.telnum}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"email\" md={2} sm={2}>Email</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"text\" id=\"email\" name=\"email\" placeholder= \"Email\" value={this.state.email}\r\n                                     onBlur={this.handleBlur('email')} onChange={this.handleInputChange} valid={errors.email === ''} invalid={errors.email != ''}/>\r\n                                    <FormFeedback>{errors.email}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup row>\r\n                                <Col md={{size:5, offset:2}}>\r\n                                     <FormGroup check>\r\n                                         <Label check>\r\n                                             <Input type=\"checkbox\" name=\"agree\" checked={this.state.agree} \r\n                                             onChange={this.handleInputChange} /> \r\n                                             <strong>May We contact You</strong>  \r\n                                         </Label>\r\n                                     </FormGroup>\r\n                                </Col>\r\n                                    \r\n                                <Col md={{size:4, offset:1}}>\r\n                                    <Input type=\"select\" name=\"contactType\" value={this.state.contactType} onChange={this.handleInputChange}>\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Input>      \r\n                                </Col>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"message\" md={2} sm={2}>Feedback</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\"  rows=\"12\" value={this.state.message} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form> */}\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\" /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    \r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default Contact;","E:\\Projects\\React_Projects\\confusion\\src\\shared\\comments.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\shared\\promotions.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\shared\\leaders.js",[],["129","130"],"E:\\Projects\\React_Projects\\confusion\\src\\components\\AboutComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\configureStore.js",["131","132"],"import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport { Reducer, initialState } from './reducer'\r\nimport { Dishes } from './dishes';\r\nimport { Comments } from './comments';\r\nimport { Promotions } from './promotions';\r\nimport { Leaders } from './leaders';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport {createForms} from 'react-redux-form';\r\nimport {InitialFeedback} from './forms';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n          dishes:Dishes,\r\n          comments : Comments,\r\n          promotions: Promotions,\r\n          leaders:Leaders,\r\n          ...createForms({feedback : InitialFeedback})\r\n        }), // reducer\r\n        applyMiddleware(thunk,logger)\r\n       \r\n    );\r\n\r\n    return store;\r\n}","E:\\Projects\\React_Projects\\confusion\\src\\redux\\reducer.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\dishes.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\comments.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\promotions.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\leaders.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionTypes.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionCreators.js",["133"],"import * as ActionTypes from './ActionTypes';\r\nimport {baseUrl} from '../shared/baseUrl';\r\nimport { actionTypes } from 'react-redux-form';\r\n\r\nexport const addComment =(comment)=>({\r\n    type:ActionTypes.ADD_COMMENT,\r\n    payload : comment\r\n    }\r\n);\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n    \r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },error => {\r\n         throw error; })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n        };\r\n\r\nexport const postFeedback =(feedback) => (dispatch) =>{\r\n    // const newFeedback = {\r\n    // firstname: firstname,\r\n    // lastname: lastname,\r\n    // telnum: telnum,\r\n    // email: email,\r\n    // agree: agree,\r\n    // contactType: contactType,\r\n    // message: message\r\n    // };\r\n     \r\n    const newFeedback = Object.assign({ date: new Date().toISOString() }, feedback);\r\n\r\n\r\n    return fetch(baseUrl + 'feedback', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newFeedback),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },error => {\r\n         throw error; })\r\n        .then(response => response.json())\r\n        .then(response => alert(JSON.stringify(response)))\r\n        .catch(error =>  { console.log('post feedback', error.message); alert('Your  could not be posted\\nError: '+error.message); });\r\n        };\r\n\r\n\r\n//DISHES\r\nexport const fetchDishes = () =>(dispatch)=> {\r\n    dispatch(dishesLoading(true));\r\n    // setTimeout(()=>{dispatch(addDishes(DISHES))},2000);\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response;\r\n        }\r\n        else\r\n        {\r\n            var error = new Error('Error'+response.status+':'+response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n   },error => {\r\n       var errMsg = new Error('Error'+error.message);\r\n       throw errMsg;\r\n   })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type : ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errMsg) => ({\r\n    type : ActionTypes.DISHES_FAILED ,\r\n    payload: errMsg\r\n });\r\n\r\nexport const addDishes = (dishes) => ({\r\n type: ActionTypes.ADD_DISHES,\r\n payload : dishes\r\n });\r\n\r\n\r\n//COMMENTS\r\nexport const fetchComments = () =>(dispatch)=> {\r\n   \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if(response.ok)\r\n          return response;\r\n        else \r\n        {\r\n            var error= new Error('Error'+response.status + ':'+ response.statusText);\r\n            error.response = response;\r\n            return error;\r\n        }\r\n    },error => {\r\n        var errMsg=new Error(error.message);\r\n        throw errMsg;\r\n    })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error)));\r\n}\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\n\r\n//PROMOTIONS\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if(response.ok)\r\n          return response;\r\n        else \r\n        {\r\n            var error= new Error('Error'+response.status + ':'+ response.statusText);\r\n            error.response = response;\r\n            return error;\r\n        }\r\n    },error => {\r\n        var errMsg=new Error(error.message);\r\n        throw errMsg;\r\n    })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n\r\n//LEADERS\r\nexport const fetchLeaders = () =>(dispatch) => {\r\n    dispatch(leadersLoading());\r\n\r\n    return(fetch(baseUrl+'leaders'))\r\n    .then(response => {\r\n        if(response.ok)\r\n           return response;\r\n        else{\r\n            var error = new Error(\"Error\"+error.status+\":\"+error.statusText);\r\n            error.response=response;\r\n            throw error\r\n        }\r\n    },error =>  {\r\n        var errMsg = error.message;\r\n        return errMsg;\r\n    }  \r\n    )\r\n    .then(response => response.json())\r\n    .then(leaders => dispatch(addLeaders(leaders)))\r\n    .catch(error => dispatch(leadersFailed(error)));\r\n\r\n}\r\n\r\nexport const leadersLoading =  () => ({\r\n    type : ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const addLeaders=  (leaders) => ({\r\n    type : ActionTypes.ADD_LEADERS,\r\n    payload:leaders\r\n});\r\n\r\nexport const leadersFailed = (errMsg) =>({\r\n    type:ActionTypes.LEADERS_FAILED,\r\n    payload:errMsg\r\n});","E:\\Projects\\React_Projects\\confusion\\src\\components\\LoadingComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\forms.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\CommentComponent.js",["134","135","136","137"],"import React,{Component} from 'react';\r\nimport {Control,LocalForm,Errors} from 'react-redux-form'\r\nimport {Button,Field, Row,Col,Label,Modal,  ModalBody, ModalHeader} from 'reactstrap';\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\n class CommentForm extends Component\r\n    {\r\n\r\n        constructor(props){\r\n            super(props);\r\n\r\n        this.state={\r\n            isModalOpen : false\r\n        };\r\n       \r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit =this.handleSubmit.bind(this);\r\n        }\r\n\r\n        toggleModal(){\r\n            this.setState({\r\n                isModalOpen : !this.state.isModalOpen\r\n            });\r\n        }\r\n        \r\n        handleSubmit(values){\r\n            this.toggleModal();\r\n            this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n            console.log(\"Current state is : \"+JSON.stringify(values));\r\n            alert(\"Current state is : \"+JSON.stringify(values));\r\n        }\r\n\r\n        render()\r\n        {\r\n            return(\r\n                 <div>\r\n                 <Button   onClick={this.toggleModal} type=\"submit\" color=\"secondary\"><span className=\"fa fa-edit fa-lg\"></span>Comment </Button>\r\n                 <Modal isOpen={this.state.isModalOpen}>\r\n                 <ModalHeader toggle={this.toggleModal}>Add Comments</ModalHeader>\r\n                    <ModalBody>\r\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"Rating\" md={2}>Rating</Label>\r\n                            <Col md={10}>\r\n                            <Control.select model=\".rating\" name=\"rating\" placeholder=\"rating\" \r\n                            className=\"form-control\">\r\n    \r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                             </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                                <Label htmlFor=\"Name\" md={2}>Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"Comment\" md={2}>Add Comment</Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                    placeholder=\"Add Comment\" className=\"form-control\" rows=\"6\"/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                    </LocalForm>\r\n                    </ModalBody>\r\n                 </Modal>\r\n                 </div>\r\n            );\r\n                \r\n        }\r\n    }\r\n\r\n    export default CommentForm;","E:\\Projects\\React_Projects\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":38,"column":3,"nodeType":"144","messageId":"145","endLine":49,"endColumn":4},{"ruleId":"146","severity":1,"message":"147","line":4,"column":29,"nodeType":"148","messageId":"149","endLine":4,"endColumn":36},{"ruleId":"150","severity":1,"message":"151","line":130,"column":29,"nodeType":"152","endLine":130,"endColumn":71},{"ruleId":"153","severity":1,"message":"154","line":211,"column":37,"nodeType":"152","endLine":217,"endColumn":44},{"ruleId":"153","severity":1,"message":"154","line":233,"column":37,"nodeType":"152","endLine":239,"endColumn":44},{"ruleId":"153","severity":1,"message":"154","line":255,"column":37,"nodeType":"152","endLine":261,"endColumn":44},{"ruleId":"153","severity":1,"message":"154","line":278,"column":37,"nodeType":"152","endLine":284,"endColumn":44},{"ruleId":"153","severity":1,"message":"155","line":300,"column":45,"nodeType":"152","endLine":301,"endColumn":80},{"ruleId":"153","severity":1,"message":"156","line":307,"column":37,"nodeType":"152","endLine":308,"endColumn":66},{"ruleId":"153","severity":1,"message":"157","line":317,"column":37,"nodeType":"152","endLine":319,"endColumn":68},{"ruleId":"138","replacedBy":"158"},{"ruleId":"140","replacedBy":"159"},{"ruleId":"146","severity":1,"message":"160","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":17},{"ruleId":"146","severity":1,"message":"161","line":2,"column":19,"nodeType":"148","messageId":"149","endLine":2,"endColumn":31},{"ruleId":"146","severity":1,"message":"162","line":3,"column":10,"nodeType":"148","messageId":"149","endLine":3,"endColumn":21},{"ruleId":"146","severity":1,"message":"163","line":3,"column":16,"nodeType":"148","messageId":"149","endLine":3,"endColumn":21},{"ruleId":"153","severity":1,"message":"156","line":47,"column":29,"nodeType":"152","endLine":48,"endColumn":54},{"ruleId":"153","severity":1,"message":"154","line":61,"column":37,"nodeType":"152","endLine":67,"endColumn":44},{"ruleId":"153","severity":1,"message":"157","line":83,"column":33,"nodeType":"152","endLine":84,"endColumn":98},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE",["164"],["165"],"'Reducer' is defined but never used.","'initialState' is defined but never used.","'actionTypes' is defined but never used.","'Field' is defined but never used.","no-global-assign","no-unsafe-negation"]