[{"E:\\Projects\\React_Projects\\confusion\\src\\index.js":"1","E:\\Projects\\React_Projects\\confusion\\src\\App.js":"2","E:\\Projects\\React_Projects\\confusion\\src\\reportWebVitals.js":"3","E:\\Projects\\React_Projects\\confusion\\src\\components\\MenuComponent.js":"4","E:\\Projects\\React_Projects\\confusion\\src\\shared\\dishes.js":"5","E:\\Projects\\React_Projects\\confusion\\src\\components\\DishDetailComponent.js":"6","E:\\Projects\\React_Projects\\confusion\\src\\components\\MainComponent.js":"7","E:\\Projects\\React_Projects\\confusion\\src\\components\\HeaderComponent.js":"8","E:\\Projects\\React_Projects\\confusion\\src\\components\\FooterComponent.js":"9","E:\\Projects\\React_Projects\\confusion\\src\\components\\HomeComponent.js":"10","E:\\Projects\\React_Projects\\confusion\\src\\components\\ContactComponent.js":"11","E:\\Projects\\React_Projects\\confusion\\src\\shared\\comments.js":"12","E:\\Projects\\React_Projects\\confusion\\src\\shared\\promotions.js":"13","E:\\Projects\\React_Projects\\confusion\\src\\shared\\leaders.js":"14","E:\\Projects\\React_Projects\\confusion\\src\\components\\AboutComponent.js":"15","E:\\Projects\\React_Projects\\confusion\\src\\redux\\configureStore.js":"16","E:\\Projects\\React_Projects\\confusion\\src\\redux\\reducer.js":"17","E:\\Projects\\React_Projects\\confusion\\src\\redux\\dishes.js":"18","E:\\Projects\\React_Projects\\confusion\\src\\redux\\comments.js":"19","E:\\Projects\\React_Projects\\confusion\\src\\redux\\promotions.js":"20","E:\\Projects\\React_Projects\\confusion\\src\\redux\\leaders.js":"21","E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionTypes.js":"22","E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionCreators.js":"23","E:\\Projects\\React_Projects\\confusion\\src\\components\\LoadingComponent.js":"24"},{"size":656,"mtime":1607167484781,"results":"25","hashOfConfig":"26"},{"size":539,"mtime":1608021186540,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":1591,"mtime":1608359673536,"results":"29","hashOfConfig":"26"},{"size":1490,"mtime":1607431869454,"results":"30","hashOfConfig":"26"},{"size":7551,"mtime":1608360271198,"results":"31","hashOfConfig":"26"},{"size":3021,"mtime":1608359794780,"results":"32","hashOfConfig":"26"},{"size":5141,"mtime":1607840110048,"results":"33","hashOfConfig":"26"},{"size":2635,"mtime":1607660626552,"results":"34","hashOfConfig":"26"},{"size":1809,"mtime":1608359732100,"results":"35","hashOfConfig":"26"},{"size":17439,"mtime":1608039122782,"results":"36","hashOfConfig":"26"},{"size":4280,"mtime":1607432873732,"results":"37","hashOfConfig":"26"},{"size":445,"mtime":1607432498390,"results":"38","hashOfConfig":"26"},{"size":2382,"mtime":1607431893221,"results":"39","hashOfConfig":"26"},{"size":4310,"mtime":1607663476332,"results":"40","hashOfConfig":"26"},{"size":667,"mtime":1608356643399,"results":"41","hashOfConfig":"26"},{"size":407,"mtime":1608021181094,"results":"42","hashOfConfig":"26"},{"size":598,"mtime":1608357979309,"results":"43","hashOfConfig":"26"},{"size":476,"mtime":1608192559574,"results":"44","hashOfConfig":"26"},{"size":197,"mtime":1608191534160,"results":"45","hashOfConfig":"26"},{"size":185,"mtime":1608191639343,"results":"46","hashOfConfig":"26"},{"size":179,"mtime":1608354431552,"results":"47","hashOfConfig":"26"},{"size":761,"mtime":1608358950084,"results":"48","hashOfConfig":"26"},{"size":256,"mtime":1608357071097,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"qy6ms3",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"E:\\Projects\\React_Projects\\confusion\\src\\index.js",[],["104","105"],"E:\\Projects\\React_Projects\\confusion\\src\\App.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\reportWebVitals.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\MenuComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\shared\\dishes.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\DishDetailComponent.js",["106","107","108","109","110"],"import React , {Component} from 'react';\r\n\r\nimport {Card, CardImg,CardText,CardBody,CardTitle,Breadcrumb,BreadcrumbItem,Button,Field, Row,Col,Label,Modal,  ModalBody, ModalHeader} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {Control,LocalForm,Errors} from 'react-redux-form'\r\nimport { addComment } from '../redux/ActionCreators';\r\nimport {Loading} from './LoadingComponent';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\n    class CommentForm extends Component\r\n    {\r\n\r\n        constructor(props){\r\n            super(props);\r\n\r\n        this.state={\r\n            isModalOpen : false\r\n        };\r\n       \r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit =this.handleSubmit.bind(this);\r\n        }\r\n\r\n        toggleModal(){\r\n            this.setState({\r\n                isModalOpen : !this.state.isModalOpen\r\n            });\r\n        }\r\n        \r\n        handleSubmit(values){\r\n            this.toggleModal();\r\n            this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n            console.log(\"Current state is : \"+JSON.stringify(values));\r\n            alert(\"Current state is : \"+JSON.stringify(values));\r\n        }\r\n\r\n        render()\r\n        {\r\n            return(\r\n                 <div>\r\n                 <Button   onClick={this.toggleModal} type=\"submit\" color=\"secondary\"><span className=\"fa fa-edit fa-lg\"></span>Comment </Button>\r\n                 <Modal isOpen={this.state.isModalOpen}>\r\n                 <ModalHeader toggle={this.toggleModal}>Add Comments</ModalHeader>\r\n                    <ModalBody>\r\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"Rating\" md={2}>Rating</Label>\r\n                            <Col md={10}>\r\n                            <Control.select model=\".rating\" name=\"rating\" placeholder=\"rating\" \r\n                            className=\"form-control\">\r\n    \r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                             </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                                <Label htmlFor=\"Name\" md={2}>Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"Comment\" md={2}>Add Comment</Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                    placeholder=\"Add Comment\" className=\"form-control\" rows=\"6\"/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                    </LocalForm>\r\n                    </ModalBody>\r\n                 </Modal>\r\n                 </div>\r\n            );\r\n                \r\n        }\r\n    }\r\n    \r\n    function RenderDish({dish})\r\n    {\r\n        \r\n            return(\r\n                \r\n                <Card id={dish.id}>\r\n                    <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                    <CardBody>\r\n    \r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                        <CardText>{dish.description}</CardText>\r\n\r\n                \r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        \r\n    }\r\n\r\n    function RenderComments({comments,addComment,dishId})\r\n    {\r\n    // alert(comment.id);\r\n\r\n        return (\r\n            <div>\r\n            {\r\n            comments.map((comment)=> {\r\n            return(\r\n            <ul id={comment.id} class=\"list-unstyled\">\r\n            <li>{comment.comment}</li>\r\n            <li>--{comment.author},{new Intl.DateTimeFormat('en-US',{year:'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.date)))}</li>\r\n            </ul>\r\n            );\r\n          })}\r\n            <CommentForm dishId={dishId} addComment={addComment}/>\r\n        </div>\r\n        );\r\n            \r\n           \r\n        \r\n    }\r\n    \r\n\r\n    const DishDetail=(props)=>\r\n    {\r\n      \r\n       // alert(props.comment.id);\r\n    if (props.dishesLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.dishesErrMsg) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <h4>{props.dishesErrMsg}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n        if (props.dish != null)\r\n           return (\r\n            <div className=\"container\">\r\n                <Breadcrumb>\r\n                <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"row\">\r\n                \r\n                <div  className=\"col-lg-5 col-md-5 col-sm-5  m-2\"><RenderDish dish={props.dish} isLoading={props.dishesLoading} errMsg={props.dishesErrMsg}/> </div>\r\n                <div  className=\"col-lg-5 col-md-5 col-sm-5  m-2\"><h4>Comments</h4><RenderComments comments={props.comment} addComment={props.addComment} dishId={props.dish.id}/>\r\n              \r\n                </div>\r\n           </div> \r\n            </div>\r\n           \r\n            );\r\n        else\r\n            return(<div></div>); \r\n    \r\n   }\r\n        \r\n\r\n\r\n\r\nexport default DishDetail;","E:\\Projects\\React_Projects\\confusion\\src\\components\\MainComponent.js",["111"],"import { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Header from './HeaderComponent'\r\nimport Footer from './FooterComponent'\r\n;import Menu from './MenuComponent';\r\nimport DishDetail from './DishDetailComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport {Switch, Route, Redirect, withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport { addComment, fetchDetails } from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state =>{\r\n  return{\r\n    dishes :state.dishes,\r\n    comments : state.comments,\r\n    promotions : state.promotions,\r\n    leaders :state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  \r\n  addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n  fetchDetails: () =>{ dispatch(fetchDetails())}\r\n\r\n});\r\n\r\nclass Main extends Component\r\n{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.state = {\r\n    //   dishes: DISHES,\r\n    //   comments : COMMENTS,\r\n    //   leaders : LEADERS,\r\n    //   promotions : PROMOTIONS\r\n    // };\r\n\r\n  }\r\n\r\n  // onDishSelect(dishId) {\r\n  //   this.setState({ selectedDish: dishId});}\r\n  componentDidMount(){\r\n    this.props.fetchDetails();\r\n  }\r\n  \r\n  render(){\r\n    const HomePage = ()=>{\r\n      return (\r\n       <Home dish={this.props.dishes.dishes.filter((dish)=>dish.featured)[0]} \r\n       dishesLoading = { this.props.dishes.isLoading}\r\n       dishesErrMSg = {this.props.dishes.errMsg}\r\n       promotion={this.props.promotions.filter((promotion)=>promotion.featured)[0]} \r\n       leader={this.props.leaders.filter((leader)=>leader.featured)[0]} \r\n       />\r\n      );\r\n    };\r\n\r\n    const DishWithId = ({match}) =>{\r\n      return (\r\n      <DishDetail dish={this.props.dishes.dishes.filter((dish)=>dish.id === parseInt(match.params.dishId,10))[0]}\r\n       comment = {this.props.comments.filter((comment)=>comment.dishId === parseInt(match.params.dishId,10))} \r\n       addComment={this.props.addComment}\r\n       dishesLoading={this.props.dishes.isLoading}\r\n       dishesErrMsg={this.props.dishes.errMsg}/>\r\n      );\r\n    };\r\n\r\n\r\n    return (\r\n\r\n      \r\n      <div className=\"App\">\r\n        <Header/>\r\n        {/* <Menu dishes={this.state.dishes} onClick={(dishId)=> this.onDishSelect(dishId)}/>\r\n        <DishDetail dish={this.state.dishes.filter((dish)=>dish.id === this.state.selectedDish)[0]}/> */}\r\n        <Switch>\r\n        <Route path='/home' component={HomePage}/>\r\n        <Route exact path='/contactus' component={Contact}/>\r\n        <Route exact path='/about' component={()=> <About leaders={this.props.leaders}/>}/>\r\n        <Route exact path='/menu' component={()=><Menu dishes={this.props.dishes}/>}/>\r\n        <Route path='/menu/:dishId' component={DishWithId}/>\r\n        <Redirect to='/home'/>\r\n        </Switch>\r\n        \r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//export default Main;\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));\r\n","E:\\Projects\\React_Projects\\confusion\\src\\components\\HeaderComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\FooterComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\HomeComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\ContactComponent.js",["112","113","114","115","116","117","118","119"],"import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {BreadcrumbItem,Breadcrumb,Button,Label, Row, Col} from 'reactstrap';\r\nimport {Control,LocalForm,Errors} from 'react-redux-form'\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass  Contact extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n        //this.handleInputChange=this.handleInputChange.bind(this);\r\n        //this.handleBlur=this.handleBlur.bind(this);\r\n       \r\n        // this.state = {\r\n        //     firstname : '',\r\n        //     lastname : '',\r\n        //     telnum : '',\r\n        //     email : '',\r\n        //     agree: false,\r\n        //     contactType: 'Tel,',\r\n        //     message: '',\r\n        //     touched:{\r\n        //         firstname:false,\r\n        //         lastname: false,\r\n        //         telnum : false,\r\n        //         email: false\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    // handleBlur = (field) => (evt) =>\r\n    // {\r\n    //     this.setState({\r\n    //         touched:{...this.state.touched, [field]:true}\r\n    //     });\r\n\r\n    //}\r\n\r\n    // validate(firstname,lastname,telnum,email){\r\n    //     const errors={\r\n    //         firstname : '',\r\n    //         lastname : '',\r\n    //         telnum : '',\r\n    //         email : '',\r\n    //     }\r\n\r\n    //     if(this.state.touched.firstname && firstname.length<3)\r\n    //       errors.firstname = \"Invalid FirstName\";\r\n    //     else if(this.state.touched.firstname && firstname.length > 10)\r\n    //       errors.firstname = \"Invalid FirstName\";\r\n        \r\n    //     if(this.state.touched.lastname && lastname.length<3)\r\n    //       errors.lastname = \"Invalid LastName\";\r\n    //     else if(this.state.touched.lastname && lastname.length > 10)\r\n    //       errors.lastname = \"Invalid LastName\";\r\n\r\n    //     const reg = /^\\d+$/;\r\n    //     if(this.state.touched.telnum && !reg.test(telnum))\r\n    //       errors.telnum =\"Invalid Number\";\r\n\r\n    //     if(this.state.touched.email &&  email.split('').filter(x =>x === '@').length !== 1)\r\n    //     errors.telnum =\"Invalid Email\";\r\n\r\n    //     return errors;\r\n\r\n        \r\n    // }\r\n\r\n\r\n    // handleInputChange(event){\r\n    //     const target = event.target;\r\n    //     const value= target.type === 'checkbox' ? target.checked : target.value;\r\n    //     const name= target.name;       \r\n\r\n    //     this.setState({\r\n    //         [name]:value\r\n    //     });\r\n\r\n    // }\r\n\r\n    handleSubmit(values)\r\n    {\r\n        console.log(\"Current state is : \"+JSON.stringify(values));\r\n        alert(\"Current state is : \"+JSON.stringify(values));\r\n       \r\n    }\r\n\r\n    render(){\r\n\r\n       // const errors = this.validate(this.state.firstname,this.state.lastname,this.state.telnum,this.state.email);\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row row-content\">\r\n              <Breadcrumb>\r\n              <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n              <BreadcrumbItem active>Contact</BreadcrumbItem>\r\n              </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        {/* <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"firstname\" md={2} sm={2}> FirstName</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\"  placeholder= \"First Name \" value={this.state.firstname} \r\n                                    onBlur={this.handleBlur('firstname')} onChange={this.handleInputChange} valid={errors.firstname === ''} invalid={errors.firstname != ''}/>\r\n                                    <FormFeedback>{errors.firstname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"lastname\" md={2} sm={2}> LastName</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\" placeholder= \"Last Name \" value={this.state.lastname} \r\n                                    onBlur={this.handleBlur('lastname')} onChange={this.handleInputChange} valid={errors.lastname === ''} invalid={errors.lastname != ''}/>\r\n                                    <FormFeedback>{errors.lastname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"telnum\" md={2} sm={2}>Contact</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\" placeholder= \"Phone Number \" value={this.state.telnum} \r\n                                    onBlur={this.handleBlur('telnum')} onChange={this.handleInputChange} valid={errors.telnum === ''} invalid={errors.telnum != ''}/>\r\n                                    <FormFeedback>{errors.telnum}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"email\" md={2} sm={2}>Email</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"text\" id=\"email\" name=\"email\" placeholder= \"Email\" value={this.state.email}\r\n                                     onBlur={this.handleBlur('email')} onChange={this.handleInputChange} valid={errors.email === ''} invalid={errors.email != ''}/>\r\n                                    <FormFeedback>{errors.email}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup row>\r\n                                <Col md={{size:5, offset:2}}>\r\n                                     <FormGroup check>\r\n                                         <Label check>\r\n                                             <Input type=\"checkbox\" name=\"agree\" checked={this.state.agree} \r\n                                             onChange={this.handleInputChange} /> \r\n                                             <strong>May We contact You</strong>  \r\n                                         </Label>\r\n                                     </FormGroup>\r\n                                </Col>\r\n                                    \r\n                                <Col md={{size:4, offset:1}}>\r\n                                    <Input type=\"select\" name=\"contactType\" value={this.state.contactType} onChange={this.handleInputChange}>\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Input>      \r\n                                </Col>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup row>\r\n                                <Label htmlfor=\"message\" md={2} sm={2}>Feedback</Label>\r\n                                <Col md={10} sm={10}>\r\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\"  rows=\"12\" value={this.state.message} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form> */}\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\" /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    \r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default Contact;","E:\\Projects\\React_Projects\\confusion\\src\\shared\\comments.js",[],["120","121"],"E:\\Projects\\React_Projects\\confusion\\src\\shared\\promotions.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\shared\\leaders.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\AboutComponent.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\configureStore.js",["122","123"],"import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport { Reducer, initialState } from './reducer'\r\nimport { Dishes } from './dishes';\r\nimport { Comments } from './comments';\r\nimport { Promotions } from './promotions';\r\nimport { Leaders } from './leaders';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n          dishes:Dishes,\r\n          comments : Comments,\r\n          promotions: Promotions,\r\n          leaders:Leaders\r\n        }), // reducer\r\n        applyMiddleware(thunk,logger)\r\n       \r\n    );\r\n\r\n    return store;\r\n}","E:\\Projects\\React_Projects\\confusion\\src\\redux\\reducer.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\dishes.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\comments.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\promotions.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\leaders.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionTypes.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\redux\\ActionCreators.js",[],"E:\\Projects\\React_Projects\\confusion\\src\\components\\LoadingComponent.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":84,"nodeType":"130","messageId":"131","endLine":3,"endColumn":89},{"ruleId":"128","severity":1,"message":"132","line":6,"column":10,"nodeType":"130","messageId":"131","endLine":6,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":52,"column":29,"nodeType":"135","endLine":53,"endColumn":54},{"ruleId":"133","severity":1,"message":"136","line":66,"column":37,"nodeType":"135","endLine":72,"endColumn":44},{"ruleId":"133","severity":1,"message":"137","line":88,"column":33,"nodeType":"135","endLine":89,"endColumn":98},{"ruleId":"138","severity":1,"message":"139","line":31,"column":3,"nodeType":"140","messageId":"141","endLine":41,"endColumn":4},{"ruleId":"142","severity":1,"message":"143","line":126,"column":29,"nodeType":"135","endLine":126,"endColumn":71},{"ruleId":"133","severity":1,"message":"136","line":207,"column":37,"nodeType":"135","endLine":213,"endColumn":44},{"ruleId":"133","severity":1,"message":"136","line":229,"column":37,"nodeType":"135","endLine":235,"endColumn":44},{"ruleId":"133","severity":1,"message":"136","line":251,"column":37,"nodeType":"135","endLine":257,"endColumn":44},{"ruleId":"133","severity":1,"message":"136","line":274,"column":37,"nodeType":"135","endLine":280,"endColumn":44},{"ruleId":"133","severity":1,"message":"144","line":296,"column":45,"nodeType":"135","endLine":297,"endColumn":80},{"ruleId":"133","severity":1,"message":"134","line":303,"column":37,"nodeType":"135","endLine":304,"endColumn":66},{"ruleId":"133","severity":1,"message":"137","line":313,"column":37,"nodeType":"135","endLine":315,"endColumn":68},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","replacedBy":"146"},{"ruleId":"128","severity":1,"message":"147","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":17},{"ruleId":"128","severity":1,"message":"148","line":2,"column":19,"nodeType":"130","messageId":"131","endLine":2,"endColumn":31},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Field' is defined but never used.","Identifier","unusedVar","'addComment' is defined but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["149"],["150"],"'Reducer' is defined but never used.","'initialState' is defined but never used.","no-global-assign","no-unsafe-negation"]